### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules main.ml > main.ml.depends # cached
# Target: cell.ml.depends, tags: { extension:ml, file:cell.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules cell.ml > cell.ml.depends # cached
# Target: cell.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:cell.cmo, file:cell.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o cell.cmo cell.ml # cached
# Target: command.ml.depends, tags: { extension:ml, file:command.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules command.ml > command.ml.depends # cached
# Target: debug.ml.depends, tags: { extension:ml, file:debug.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules debug.ml > debug.ml.depends # cached
# Target: debug.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:debug.cmo, file:debug.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o debug.cmo debug.ml # cached
# Target: sheet.ml.depends, tags: { extension:ml, file:sheet.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules sheet.ml > sheet.ml.depends # cached
# Target: sheet.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:sheet.cmo, file:sheet.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o sheet.cmo sheet.ml # cached
# Target: command.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o command.cmo command.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules lexer.ml > lexer.ml.depends
# Target: parser.mly, tags: { extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o parser.cmi parser.mli
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o lexer.cmo lexer.ml
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o main.cmo main.ml
# Target: cell.cmx, tags: { compile, extension:cmx, extension:ml, file:cell.cmx, file:cell.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o cell.cmx cell.ml # cached
# Target: debug.cmx, tags: { compile, extension:cmx, extension:ml, file:debug.cmx, file:debug.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o debug.cmx debug.ml # cached
# Target: sheet.cmx, tags: { compile, extension:cmx, extension:ml, file:sheet.cmx, file:sheet.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o sheet.cmx sheet.ml # cached
# Target: command.cmx, tags: { compile, extension:cmx, extension:ml, file:command.cmx, file:command.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o command.cmx command.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o parser.cmx parser.ml
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o lexer.cmx lexer.ml
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o main.cmx main.ml
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa cell.cmx debug.cmx sheet.cmx command.cmx parser.cmx lexer.cmx main.cmx -o main.native
# Compilation successful.
